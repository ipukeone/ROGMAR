---
services:

### Docker socket proxy
  socketproxy:
    image: ${SOCKETPROXY_IMAGE:?Image required}
    container_name: ${TRAEFIK_HOSTNAME}-socketproxy
    hostname: ${TRAEFIK_HOSTNAME}-socketproxy
    restart: unless-stopped
    read_only: true                                                                                                                                             # Make the container filesystem read-only
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - 2375:2375
    tmpfs:                                                                                                                                                      # Mount volumes to tmpfs (RAM) to make it writeable
      - /run
    volumes:
      - /etc/localtime:/etc/localtime:ro                                                                                                                        # Localtime
      - /etc/timezone:/etc/timezone:ro                                                                                                                          # Timezone
      - /var/run/docker.sock:/var/run/docker.sock:ro                                                                                                            # Docker.sock volume
    environment:
      LOG_LEVEL: err                                                                                                                                            # Possible values are: debug, info, notice, warning, err, crit, alert and emerg
      CONTAINERS: 1                                                                                                                                             # "/containers" permissions (start, restart, stop, kill)
    networks:
      - backend

### Traefik
  traefik:
    image: ${IMAGE:?Image required}
    container_name: ${TRAEFIK_HOSTNAME}
    hostname: ${TRAEFIK_HOSTNAME}
    command:
      ### Enable the Traefik WebUI dashboard
      - --api=true
      - --api.dashboard=true
      - --api.disabledashboardad=true
      - --api.insecure=true
      ### Enable log
      - --log.level=${LOG_LEVEL}
      - --log.format=${LOG_FORMAT}
      - --log.filePath=/var/log/traefik/traefik.log
      ### Enable accesslog
      - --accesslog=true
      - --accesslog.bufferingsize=${BUFFERINGSIZE}
      - --accesslog.format=${LOG_FORMAT}
      - --accesslog.filepath=/var/log/traefik/access.log
      - --accesslog.filters.statuscodes=${LOG_STATUSCODES}
      ### Allow insecure backend connections
      - --serverstransport.insecureskipverify=true
      ### Traefik entrypoints (network ports) configuration
      ## Not used in apps, but redirect everything from HTTP to HTTPS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      ## HTTPS endpoint, with domain wildcard
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.asdefault=true
      # Set trusted IPs
      - --entrypoints.websecure.proxyProtocol.trustedIPs=${LOCAL_IPS},${CLOUDFLARE_IPS}
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=${LOCAL_IPS},${CLOUDFLARE_IPS}
      # Generate a wildcard domain certificate
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=${CERTRESOLVER}
      - --entrypoints.websecure.http.tls.domains[0].main=${TRAEFIK_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${TRAEFIK_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[1].main=${TRAEFIK_DOMAIN_1}
      # - --entrypoints.websecure.http.tls.domains[1].sans=*.${TRAEFIK_DOMAIN_1}
      # - --entrypoints.websecure.http.tls.domains[1].main=${TRAEFIK_DOMAIN_2}
      # - --entrypoints.websecure.http.tls.domains[1].sans=*.${TRAEFIK_DOMAIN_2}
      # Enable default TLS options for all routers
      - --entrypoints.websecure.http.tls.options=${TLSOPTIONS}
      # Enable default middlewares for all routers
      - --entrypoints.websecure.http.middlewares=${MIDDLEWARES}
      ### Provider configuration
      - --providers.file.directory=/etc/traefik/conf.d
      - --providers.docker=true
      - --providers.docker.network=frontend
      - --providers.docker.endpoint=tcp://${TRAEFIK_HOSTNAME}-socketproxy:2375
      - --providers.docker.defaultrule='Host(`{{ index .Labels "com.docker.compose.service"}}.{{ env "TRAEFIK_DOMAIN" }}`)'
      - --providers.docker.exposedbydefault=false
      ### Lets Encrypt for SSL certificates
      ## LetsEncrypt Staging Server
      - --certificatesresolvers.${CERTRESOLVER}-staging.acme.email=${EMAIL_PREFIX}@${TRAEFIK_DOMAIN}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.storage=/var/traefik/certs/${CERTRESOLVER}-acme.json
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.${CERTRESOLVER}-staging.acme.keytype=${KEYTYPE}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.dnsChallenge.provider=${CERTRESOLVER}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.dnsChallenge.resolvers=${DNSCHALLENGE_RESOLVERS}
      ## LetsEncrypt Production Server
      - --certificatesresolvers.${CERTRESOLVER}.acme.email=${EMAIL_PREFIX}@${TRAEFIK_DOMAIN}
      - --certificatesResolvers.${CERTRESOLVER}.acme.storage=/var/traefik/certs/${CERTRESOLVER}-acme.json
      - --certificatesResolvers.${CERTRESOLVER}.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.${CERTRESOLVER}.acme.keytype=${KEYTYPE}
      - --certificatesResolvers.${CERTRESOLVER}.acme.dnsChallenge.provider=${CERTRESOLVER}
      - --certificatesResolvers.${CERTRESOLVER}.acme.dnsChallenge.resolvers=${DNSCHALLENGE_RESOLVERS}
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
      # - 8080:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${TRAEFIK_HOSTNAME}-rtr.rule=Host(`${TRAEFIK_HOSTNAME}.${TRAEFIK_DOMAIN}`)"                                                       # FQDN
      - "traefik.http.routers.${TRAEFIK_HOSTNAME}-rtr.middlewares=authentik-proxy@file"                                                                         # Middlewares: Authentik proxy authentication
      - "traefik.http.services.${TRAEFIK_HOSTNAME}-svc.loadBalancer.server.port=${TRAEFIK_PORT}"                                                                # Port
    volumes:
      - /etc/localtime:/etc/localtime:ro                                                                                                                        # Localtime
      - /etc/timezone:/etc/timezone:ro                                                                                                                          # Timezone
      - ./config/middlewares.yaml:/etc/traefik/conf.d/middlewares.yaml:ro                                                                                       # Traefik middlewares
      - ./config/tls-opts.yaml:/etc/traefik/conf.d/tls-opts.yaml:ro                                                                                             # Traefik TLS config
      - ./config/conf.d/:/etc/traefik/conf.d/rules/:ro                                                                                                          # Traefik file routers
      - ./config/certs/:/var/traefik/certs/:rw                                                                                                                  # Traefik certificate store
    environment:
      CF_DNS_API_TOKEN_FILE: /run/secrets/${CF_DNS_API_TOKEN_FILENAME}                                                                                          # Cloudflare API token
      TRAEFIK_DOMAIN: ${TRAEFIK_DOMAIN}                                                                                                                         # Passing the domain name to traefik container to be able to use the variable in rules
      TRAEFIK_DOMAIN_1: ${TRAEFIK_DOMAIN_1}                                                                                                                     # Passing the second domain name to traefik container to be able to use the variable in rules
      TRAEFIK_DOMAIN_2: ${TRAEFIK_DOMAIN_2}                                                                                                                     # Passing the third domain name to traefik container to be able to use the variable in rules
      AUTHENTIK_CONTAINER_NAME: ${AUTHENTIK_CONTAINER_NAME}                                                                                                     # Passing the authentik container name to traefik container to be able to use the variable in rules
    secrets:
      - ${CF_DNS_API_TOKEN_FILENAME}
    depends_on:
      socketproxy:
        condition: service_started
    networks:
      - frontend
      - backend

secrets:
   CF_DNS_API_TOKEN:
     file: ${CF_DNS_API_TOKEN_PATH}${CF_DNS_API_TOKEN_FILENAME}

networks:
  frontend:
    external: true
    driver: bridge
  backend:
    external: true
    driver: bridge