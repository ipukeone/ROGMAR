---
x-required-services:
  - socketproxy
  - traefik_certs-dumper

services:
  app:
    ######################################################################
    # --- CONTAINER BASICS
    ######################################################################
    image: ${IMAGE:?Image required}
    container_name: ${APP_NAME:?App name required}
    hostname: ${APP_NAME}
    restart: unless-stopped                                                                                                                                     # Automatically restart unless manually stopped
    # build:                                                                                                                                                    # Optional: build image from local Dockerfile
    #   context: .
    #   dockerfile: Dockerfile

    ######################################################################
    # --- SECURITY SETTINGS
    ######################################################################
    # user: '1000:1000'                                                                                                                                         # Optional: run as specific non-root user (app user)
    read_only: true                                                                                                                                             # Filesystem is read-only except for mounted volumes
    cap_drop:                                                                                                                                                   # Drop all capabilities by default
      - ALL
    # cap_add:                                                                                                                                                  # Add only the minimum required capabilities
    #   - 
    security_opt:
      - no-new-privileges:true                                                                                                                                  # Prevent privilege escalation

    ######################################################################
    # --- SYSTEM RUNTIME
    ######################################################################
    init: true                                                                                                                                                  # PID 1 is tini â€“ handles zombies properly
    stop_grace_period: 30s                                                                                                                                      # Give app time to shut down gracefully
    oom_score_adj: -500                                                                                                                                         # Reduce likelihood of getting killed under memory pressure
    tmpfs:                                                                                                                                                      # Ephemeral storage in RAM, auto-cleared on restart
      - /run                                                                                                                                                    # Mount /run as tmpfs for runtime files (PID files, sockets, etc.)
      - /tmp                                                                                                                                                    # Mount /tmp as tmpfs for temporary files; faster and auto-cleared on restart
      - /var/log/traefik                                                                                                                                        # Traefik logs

    ######################################################################
    # --- FILESYSTEM & SECRETS
    ######################################################################
    volumes:                                                                                                                                                    # Mount external storage or host directories into the container for persistent data or config
      - /etc/localtime:/etc/localtime:ro                                                                                                                        # Set container time to host time
      - /etc/timezone:/etc/timezone:ro                                                                                                                          # Pass timezone info
      - ./appdata/config/middlewares.yaml:/etc/traefik/conf.d/middlewares.yaml:ro                                                                               # Traefik middlewares
      - ./appdata/config/tls-opts.yaml:/etc/traefik/conf.d/tls-opts.yaml:ro                                                                                     # Traefik TLS config
      - ./appdata/config/conf.d:/etc/traefik/conf.d/rules:ro                                                                                                    # Traefik file routers
      - ./appdata/config/certs:/var/traefik/certs:rw                                                                                                            # Traefik certificate store
    secrets:                                                                                                                                                    # Mount the defined secret into the container (usually under /run/secrets/)
      - CF_DNS_API_TOKEN

    ######################################################################
    # --- NETWORKING / REVERSE PROXY
    ######################################################################
    labels:                                                                                                                                                     # Metadata for the container, often used for service discovery or reverse proxy rules (e.g., Traefik)
      - "traefik.enable=true"                                                                                                                                   # Enable Traefik reverse proxy routing for this container
      - "traefik.http.routers.${APP_NAME}-rtr.rule=${TRAEFIK_HOST}"                                                                                             # Traefik router
      - "traefik.http.services.${APP_NAME}-svc.loadBalancer.server.port=${TRAEFIK_PORT:?Port required}"                                                         # Internal container port
      - "traefik.http.routers.${APP_NAME}-rtr.middlewares=authentik-proxy@file"                                                                                 # Optional Middlewares: Authentik proxy authentication
    ports:                                                                                                                                                      # Optional: exposed ports
      - 80:80
      - 443:443
    # expose:                                                                                                                                                   # Optional: expose without publishing
    #   - 80
    networks:                                                                                                                                                   # Define which Docker networks the container connects to (controls communication and isolation)
      - backend
      - frontend
    # extra_hosts:                                                                                                                                              # Optional: manual host entries
    #   - "host.docker.internal:host-gateway"

    ######################################################################
    # --- RUNTIME / ENVIRONMENT
    ######################################################################
    command:                                                                                                                                                    # Override default container command
      ### Enable the Traefik WebUI dashboard
      - --api=true
      - --api.dashboard=true
      - --api.disabledashboardad=true
      - --api.insecure=true
      ### Enable log
      - --log.level=${LOG_LEVEL}
      - --log.format=${LOG_FORMAT}
      - --log.filePath=/var/log/traefik/traefik.log
      ### Enable accesslog
      - --accesslog=true
      - --accesslog.bufferingsize=${BUFFERINGSIZE}
      - --accesslog.format=${LOG_FORMAT}
      - --accesslog.filepath=/var/log/traefik/access.log
      - --accesslog.filters.statuscodes=${LOG_STATUSCODES}
      ### Allow insecure backend connections
      - --serverstransport.insecureskipverify=true
      ### Traefik entrypoints (network ports) configuration
      ## Not used in apps, but redirect everything from HTTP to HTTPS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      ## HTTPS endpoint, with domain wildcard
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.asdefault=true
      # Set trusted IPs
      - --entrypoints.websecure.proxyProtocol.trustedIPs=${LOCAL_IPS},${CLOUDFLARE_IPS}
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=${LOCAL_IPS},${CLOUDFLARE_IPS}
      # Generate a wildcard domain certificate
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=${CERTRESOLVER}
      # Enable default TLS options for all routers
      - --entrypoints.websecure.http.tls.options=${TLSOPTIONS}
      # Enable default middlewares for all routers
      - --entrypoints.websecure.http.middlewares=${MIDDLEWARES}
      ### Provider configuration
      - --providers.file.directory=/etc/traefik/conf.d
      - --providers.docker=true
      - --providers.docker.network=frontend
      - --providers.docker.endpoint=tcp://${APP_NAME}-socketproxy:2375
      - --providers.docker.defaultrule='Host(`{{ index .Labels "com.docker.compose.service"}}.{{ env "TRAEFIK_DOMAIN" }}`)'
      - --providers.docker.exposedbydefault=false
      ### Lets Encrypt for SSL certificates
      ## LetsEncrypt Staging Server
      - --certificatesresolvers.${CERTRESOLVER}-staging.acme.email=${EMAIL_PREFIX}@${TRAEFIK_DOMAIN}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.storage=/var/traefik/certs/${CERTRESOLVER}-acme.json
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.${CERTRESOLVER}-staging.acme.keytype=${KEYTYPE}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.dnsChallenge.provider=${CERTRESOLVER}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.dnsChallenge.resolvers=${DNSCHALLENGE_RESOLVERS}
      ## LetsEncrypt Production Server
      - --certificatesresolvers.${CERTRESOLVER}.acme.email=${EMAIL_PREFIX}@${TRAEFIK_DOMAIN}
      - --certificatesResolvers.${CERTRESOLVER}.acme.storage=/var/traefik/certs/${CERTRESOLVER}-acme.json
      - --certificatesResolvers.${CERTRESOLVER}.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.${CERTRESOLVER}.acme.keytype=${KEYTYPE}
      - --certificatesResolvers.${CERTRESOLVER}.acme.dnsChallenge.provider=${CERTRESOLVER}
      - --certificatesResolvers.${CERTRESOLVER}.acme.dnsChallenge.resolvers=${DNSCHALLENGE_RESOLVERS}
    # entrypoint: ['your-entrypoint.sh']                                                                                                                        # Override default container entrypoint
    environment:                                                                                                                                                # Environment variables for container configuration
      CF_DNS_API_TOKEN_FILE: /run/secrets/CF_DNS_API_TOKEN                                                                                                      # Cloudflare API token
      TRAEFIK_DOMAIN: ${TRAEFIK_DOMAIN}                                                                                                                         # Passing the domain name to traefik container to be able to use the variable in rules
      TRAEFIK_DOMAIN_1: ${TRAEFIK_DOMAIN_1:-}                                                                                                                   # Passing the second domain name to traefik container to be able to use the variable in rules
      TRAEFIK_DOMAIN_2: ${TRAEFIK_DOMAIN_2:-}                                                                                                                   # Passing the third domain name to traefik container to be able to use the variable in rules
      AUTHENTIK_CONTAINER_NAME: ${AUTHENTIK_CONTAINER_NAME}                                                                                                     # Passing the authentik container name to traefik container to be able to use the variable in rules
    logging:                                                                                                                                                    # Configure log driver and limits to control log size and rotation
      driver: "json-file"
      options:
        max-size: "10m"                                                                                                                                         # Max log file size before rotation
        max-file: "3"                                                                                                                                           # Keep up to 3 rotated log files
    healthcheck:                                                                                                                                                # Periodic container health check to ensure service availability
      test: ['CMD', 'wget', '--spider', '--quiet', 'http://localhost:8080/dashboard/']                                                                          # Command to test container health
      interval: 30s                                                                                                                                             # Time between checks
      timeout: 5s                                                                                                                                               # Time to wait for response
      retries: 3                                                                                                                                                # Number of retries before marking unhealthy
      start_period: 10s                                                                                                                                         # Give the container time to initialize before health checks start
    stdin_open: false                                                                                                                                           # Optional: keep STDIN open
    tty: false                                                                                                                                                  # Disable terminal allocation; used for non-interactive containers

    ######################################################################
    # --- DEPENDENCIES
    ######################################################################
    depends_on:                                                                                                                                                 # Ensure these services are healthy before starting this one
      socketproxy:
        condition: service_healthy

    ######################################################################
    # --- SYSTEM LIMITS
    ######################################################################
    # shm_size: "256m"                                                                                                                                          # Shared memory (default 64M, useful e.g. for Chromium)
    # ulimits:                                                                                                                                                  # Set system resource limits for the container processes (Increasing nofile limits is useful for apps handling many simultaneous connections or files)
    #   nofile:                                                                                                                                                 # Controls the max number of open file descriptors (files, sockets, etc.)
    #     soft: 65535                                                                                                                                           # Soft limit: default max open files a process can have
    #     hard: 65535                                                                                                                                           # Hard limit: maximum value the soft limit can be raised to by privileged processes

# volumes:
#   data:
#     driver: local

secrets:                                                                                                                                                        # Define sensitive data (like passwords, tokens, keys) securely and inject into services at runtime
  CF_DNS_API_TOKEN:
    file: ${CF_DNS_API_TOKEN_PATH:?Secret Path required}${CF_DNS_API_TOKEN_FILENAME:?Secret Filename required}                                                  # Load secret from external file

networks:
  frontend:
    external: true
  backend:
    external: true